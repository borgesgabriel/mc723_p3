/******************************************************
 * This is the main file for the mips1 ArchC model    *
 * This file is automatically generated by ArchC      *
 * WITHOUT WARRANTY OF ANY KIND, either express       *
 * or implied.                                        *
 * For more information on ArchC, please visit:       *
 * http://www.archc.org                               *
 *                                                    *
 * The ArchC Team                                     *
 * Computer Systems Laboratory (LSC)                  *
 * IC-UNICAMP                                         *
 * http://www.lsc.ic.unicamp.br                       *
 ******************************************************/

// Rodolfo editou aqui
//
const char *project_name="mips";
const char *project_file="mips1.ac";
const char *archc_version="2.0beta1";
const char *archc_options="-abi -dy ";

#include <cstring>

#include <vector>
#include <new>
#include <string>
#include <systemc.h>
#include "mips.H"
#include "memory.h"
#include "cores_controller.h"
#include "arctan.h"
#include "bus.h"

#define NUMBER_OF_CORES 8

int sc_main(int ac, char *av[])
{

  //!  ISA simulator
  char cores_bytes[NUMBER_OF_CORES * sizeof(mips)];
  std::vector<mips*> cores(NUMBER_OF_CORES);
  for(int i = 0; i < NUMBER_OF_CORES; ++i) {
    cores[i] = new((void*)(cores_bytes + i * sizeof(mips))) mips((std::string("mips") + std::to_string(i)).c_str());
  }
  // mips mips_proc1("mips");

  //! Bus
  ac_tlm_bus bus("bus");
// Memory
  ac_tlm_mem mem("mem");
  ac_cores_controller controller("controller", &cores);
  ac_arctan arctan("arctan");

#ifdef AC_DEBUG
  ac_trace("mips1_proc1.trace");
#endif

  bus.MEM_port(mem.target_export);
  bus.CONTROLLER_port(controller.target_export);
  bus.ARCTAN_port(arctan.target_export);

  for (auto core : cores) {
    core->DM_port(bus.target_export);
    auto ac_copy = ac;
    char** av_copy = new char*[ac];
    for (int i = 0; i != ac; ++i) {
      av_copy[i] = new char[strlen(av[i]) + 1];
      std::strcpy(av_copy[i], av[i]);
    }
    core->init(ac_copy, av_copy);
    core->ISA.PauseProcessor();
  }
  cores[0]->ISA.ResumeProcessor();
  cerr << endl;

  sc_start();

  cores[0]->PrintStat();
  cerr << endl;

#ifdef AC_STATS
  mips1_proc1.ac_sim_stats.time = sc_simulation_time();
  mips1_proc1.ac_sim_stats.print();
#endif

#ifdef AC_DEBUG
  ac_close_trace();
#endif

  return cores[0]->ac_exit_status;
}
